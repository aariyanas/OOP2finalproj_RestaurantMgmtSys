@*
Group 8 Final Project - Restaurant Management Application
Name: Aariyana Sayani, Jiwon Uh, Nicole Paco, Riya Johari
Date: August 9, 2024
Program Description:
This application is designed for restaurant management, featuring multiple sections for efficiently handling different aspects of the restaurant's operations.
- Menu Management: Users can view and manage menu items through the Menu page.
This page allows for the addition, editing, and deletion of menu items. Items are displayed by category, with options to update item prices or add new items.
- Inventory Management: This page handles the restaurant's inventory.
Users can view current inventory items, place orders to restock items, and delete inventory records.
It includes functionality for adding new inventory items, specifying details such as name, quantity, price, and category.
This page helps in tracking inventory levels and ordering supplies as needed.
- Employee Management: The employee management page enables users to maintain employee records.
It includes functionality for viewing, adding, editing, and deleting employee information.
Key details such as name, position, email, join date, and wage are managed here, ensuring accurate and up-to-date records for all staff members.
Overall, the program streamlines the management of menu items, inventory, and employee information,
providing a user-friendly interface to support restaurant operations and administrative tasks.
*@

@page "/menu"
@using RestaurantManagement.Data
@inject IJSRuntime JSRuntime

<!-- Menu Items section -->
<div class="menu">
    <h3>Menu Items</h3>
    @if (menuList == null || !menuList.Any())
    {
        <p>No menu items found</p>
    }
    else
    {
        @foreach (var categoryGroup in menuList.GroupBy(item => item.Category).OrderBy(group => GetCategoryOrder(group.Key)))
        {
            <h5>@ToPascalCase(categoryGroup.Key)</h5>
            <table class="menu-items">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in categoryGroup)
                    {
                        <tr>
                            <td>@ToPascalCase(item.Name)</td>
                            <td>
                                @if (item == editingItem)
                                {
                                    <input @bind="editingPrice" class="menu-items-input" type="text" />
                                }
                                else
                                {
                                    @item.Price.ToString("F2")
                                }
                            </td>
                            <td>
                                @if (item == editingItem)
                                {
                                    <button @onclick="() => SaveEdit(item)">Save</button>
                                    <button @onclick="CancelEdit">Cancel</button>
                                }
                                else
                                {
                                    <button @onclick="() => EditItem(item)" class="edit-button">Edit</button>
                                    <button @onclick="@(async () => await ConfirmDelete(item))">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

<!-- Add new menu item section -->
<div class="add-menu-item">
    <h4>Add New Menu Item</h4>
    Name <input @bind="name" />
    Price <input @bind="price" type="number" step="0.01" />
    Category <input @bind="category" />
    <button @onclick="AddNewMenu">Add</button>
</div>

@code {
    // List to stroe menu items
    List<Menu> menuList;
    // Variables for new menu item input fields
    string name;
    double price;
    string category;
    // Variables for editing menu items
    Menu editingItem;
    double editingPrice;
    string message;

    // Load menu items when the component is initialized
    protected override void OnInitialized()
    {
        menuList = MenuManager.RetrieveMenu();
    }

    // Add a new menu item
    void AddNewMenu()
    {
        MenuManager.AddMenu(ToPascalCase(name), price, ToPascalCase(category));
        message = "Menu item added successfully";
        menuList = MenuManager.RetrieveMenu();
    }

    // Edit an existing menu item
    void EditItem(Menu item)
    {
        editingItem = item;
        editingPrice = item.Price;
    }

    // Save the edited menu item
    void SaveEdit(Menu item)
    {
        item.Price = editingPrice;
        message = MenuManager.EditMenu(ToPascalCase(item.Name), item.Price, ToPascalCase(item.Category));
        editingItem = null;
        menuList = MenuManager.RetrieveMenu();
    }

    // Cancel the edit operation
    void CancelEdit()
    {
        editingItem = null;
    }

    // Confirm the deletion of a menu item
    async Task ConfirmDelete(Menu item)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{ToPascalCase(item.Name)}'?");
        if (confirmed)
        {
            message = MenuManager.DeleteMenu(ToPascalCase(item.Name));
            menuList = MenuManager.RetrieveMenu();
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
    }

    // Get the order of the category for sorting
    private int GetCategoryOrder(string category)
    {
        var categoryOrder = new List<string> { "Burger", "Side", "Drink", "Dessert" };
        return categoryOrder.IndexOf(category) != -1 ? categoryOrder.IndexOf(category) : int.MaxValue;
    }

    // Convert a string to PascalCase
    private string ToPascalCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        var words = input.ToLower().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        var result = string.Join(" ", words.Select(word => char.ToUpper(word[0]) + word.Substring(1)));
        return result;
    }
}









