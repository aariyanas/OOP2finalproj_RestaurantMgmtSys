@page "/menu"
@using RestaurantManagement.Data
@inject IJSRuntime JSRuntime

<div class="menu">
    <h3>Menu Items</h3>
    @if (menuList == null || !menuList.Any())
    {
        <p>No menu items found</p>
    }
    else
    {
        @foreach (var categoryGroup in menuList.GroupBy(item => item.Category).OrderBy(group => GetCategoryOrder(group.Key)))
        {
            <h5>@ToPascalCase(categoryGroup.Key)</h5>
            <table class="menu-items">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in categoryGroup)
                    {
                        <tr>
                            <td>@ToPascalCase(item.Name)</td>
                            <td>
                                @if (item == editingItem)
                                {
                                    <input @bind="editingPrice" class="menu-items-input" type="text" />
                                }
                                else
                                {
                                    @item.Price.ToString("F2")
                                }
                            </td>
                            <td>
                                @if (item == editingItem)
                                {
                                    <button @onclick="() => SaveEdit(item)">Save</button>
                                    <button @onclick="CancelEdit">Cancel</button>
                                }
                                else
                                {
                                    <button @onclick="() => EditItem(item)" class="edit-button">Edit</button>
                                    <button @onclick="@(async () => await ConfirmDelete(item))">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

<div class="add-menu-item">
    <h4>Add New Menu Item</h4>
    Name <input @bind="name" />
    Price <input @bind="price" type="number" step="0.01" />
    Category <input @bind="category" />
    <button @onclick="AddNewMenu">Add</button>
</div>

@code {
    List<Menu> menuList;
    string name;
    double price;
    string category;
    Menu editingItem;
    double editingPrice;
    string message;

    protected override void OnInitialized()
    {
        menuList = MenuManager.RetrieveMenu();
    }

    void AddNewMenu()
    {
        MenuManager.AddMenu(ToPascalCase(name), price, ToPascalCase(category));
        message = "Menu item added successfully";
        menuList = MenuManager.RetrieveMenu();
    }

    void EditItem(Menu item)
    {
        editingItem = item;
        editingPrice = item.Price;
    }

    void SaveEdit(Menu item)
    {
        item.Price = editingPrice;
        message = MenuManager.EditMenu(ToPascalCase(item.Name), item.Price, ToPascalCase(item.Category));
        editingItem = null;
        menuList = MenuManager.RetrieveMenu();
    }

    void CancelEdit()
    {
        editingItem = null;
    }

    async Task ConfirmDelete(Menu item)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{ToPascalCase(item.Name)}'?");
        if (confirmed)
        {
            message = MenuManager.DeleteMenu(ToPascalCase(item.Name));
            menuList = MenuManager.RetrieveMenu();
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
    }

    private int GetCategoryOrder(string category)
    {
        var categoryOrder = new List<string> { "Burger", "Side", "Drink", "Dessert" };
        return categoryOrder.IndexOf(category) != -1 ? categoryOrder.IndexOf(category) : int.MaxValue;
    }

    private string ToPascalCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        var words = input.ToLower().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        var result = string.Join(" ", words.Select(word => char.ToUpper(word[0]) + word.Substring(1)));
        return result;
    }
}









