@page "/inventory"
@using RestaurantManagement.Data
@inject IJSRuntime JSRuntime

<div class="inventory">
    <h3>Current Inventory Items</h3>
    @if (inventoryList == null || !inventoryList.Any())
    {
        <p>No inventory items found</p>
    }
    else
    {
        @foreach (var categoryGroup in inventoryList.GroupBy(item => item.Category).OrderBy(group => GetCategoryOrder(group.Key)))
        {
            <h5>@ToPascalCase(categoryGroup.Key)</h5>
            <table class="inventory-items">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Order</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in categoryGroup)
                    {
                        <tr>
                            <td>@ToPascalCase(item.Name)</td>
                            <td>@item.Quantity</td>
                            <td>@item.Price.ToString("F2")</td>
                            <td>
                                <input type="number" min="0" step="10" @bind="item.QuantityToOrder" />
                            </td>
                            <td>
                                <button class="order-button" @onclick="@(async () => await ConfirmOrder(item))">Order</button>
                                <button class="delete-button" @onclick="@(async () => await ConfirmDelete(item))">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }

    <div class="add-inventory-item">
        <h4>Add New Inventory Item</h4>
        <label>Name<input @bind="name" /></label>
        <label>Quantity<input @bind="quantity"></label>
        <label>Price<input @bind="price"/></label>
        <label>
            Category
            <select @bind="selectedCategory">
                @foreach (var category in categories)
                {
                    <option value="@category">@ToPascalCase(category)</option>
                }
            </select>
        </label>
        <button @onclick="AddInventoryItem">Add</button>
    </div>
</div>

@code {
    List<Inventory> inventoryList;
    List<string> categories = new List<string> { "Burger", "Side", "Drink", "Dessert", "Condiments" };
    string name;
    int quantity;
    double price;
    string selectedCategory;
    Inventory editingItem;
    double editingPrice;
    string message;

    protected override void OnInitialized()
    {
        inventoryList = InventoryManager.RetrieveInventory();
        selectedCategory = categories.FirstOrDefault();
    }

    async Task AddInventoryItem()
    {
        var pascalName = ToPascalCase(name);
        var pascalCategory = ToPascalCase(selectedCategory);
        if (string.IsNullOrWhiteSpace(pascalName) || string.IsNullOrWhiteSpace(pascalCategory))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Name and Category cannot be empty.");
            return;
        }

        InventoryManager.AddInventory(pascalName, quantity, price, pascalCategory);
        inventoryList = InventoryManager.RetrieveInventory();
    }

    async Task EditItem(Inventory item)
    {
        editingItem = item;
        editingPrice = item.Price;
    }

    async Task SaveEdit(Inventory item)
    {
        item.Price = editingPrice;
        message = InventoryManager.EditInventory(ToPascalCase(item.Name), item.Quantity, item.Price, ToPascalCase(item.Category));
        editingItem = null;
        inventoryList = InventoryManager.RetrieveInventory();
        await JSRuntime.InvokeVoidAsync("alert", message); // Notify user of successful update
    }

    async Task CancelEdit()
    {
        editingItem = null;
    }

    async Task ConfirmDelete(Inventory item)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{item.Name}'?");
        if (confirmed)
        {
            message = InventoryManager.DeleteInventory(ToPascalCase(item.Name));
            inventoryList = InventoryManager.RetrieveInventory();
            await JSRuntime.InvokeVoidAsync("alert", message); // Notify user of successful deletion
        }
    }

    async Task ConfirmOrder(Inventory item)
    {
        if (item.QuantityToOrder > 0)
        {
            // Calculate new quantity by adding the ordered amount
            int newQuantity = item.Quantity + item.QuantityToOrder;

            // Update the quantity in the database
            InventoryDBhandler db = new InventoryDBhandler();
            db.UpdateQuantityInDB(ToPascalCase(item.Name), newQuantity);

            // Refresh the inventory list
            inventoryList = InventoryManager.RetrieveInventory();

            // Show success message
            message = $"Order placed for {item.QuantityToOrder} units of {ToPascalCase(item.Name)}. New quantity: {newQuantity}";
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please specify a quantity to order.");
        }
    }



    private int GetCategoryOrder(string category)
    {
        return categories.IndexOf(category) != -1 ? categories.IndexOf(category) : int.MaxValue;
    }

    private string ToPascalCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return input;

        var words = input.ToLower().Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        var result = string.Join(" ", words.Select(word => char.ToUpper(word[0]) + word.Substring(1)));
        return result;
    }
}

